@startuml

' Definición de clases abstractas y sus subclases

' MÓDULO: Gestión de Hábitats
class Habitat {
    - nombre: String
    - temperatura: double
    - humedad: double
    - limpieza: String
    + Habitat(String nombre, double temperatura, double humedad, String limpieza)
    + actualizarCondiciones(double temperatura, double humedad, String limpieza) : void
    + monitorHabitat() : void
}

class Acuatico {
    - calidadAgua: String
    + Acuatico(String nombre, double temperatura, double humedad, String limpieza, String calidadAgua)
    + monitorAcuatico(): void
}

class Terrestre {
    + Terrestre(String nombre, double temperatura, double humedad, String limpieza)
    + monitorTerrestre(): void
}

class Aviario {
    + Aviario(String nombre, double temperatura, double humedad, String limpieza)
    + monitorAviario(): void
}

Habitat <|-- Acuatico
Habitat <|-- Terrestre
Habitat <|-- Aviario

' MÓDULO: Cuidado de los Animales
class Animal {
    - nombre: String
    - especies: String
    - habitat: Habitat
    - salud: int
    - horaUltimaComida: LocalDateTime
    + alimentacion(): void
    + chequeoSalud(): void
    + monitorAnimal(): void
}

class Mamifero {
    + Mamifero(String nombre, String especies, Habitat habitat)
    + alimentar(): void
    + chequear_salud(): void
    + revisar_comportamiento(): void
}

class Ave {
    + Ave(String nombre, String especies, Habitat habitat)
    + alimentar(): void
    + chequear_salud(): void
    + revisar_comportamiento(): void
}

class Reptil {
    + Reptil(String nombre, String especies, Habitat habitat)
    + alimentar(): void
    + chequear_salud(): void
    + revisar_comportamiento(): void
}

Animal <|-- Mamifero
Animal <|-- Ave
Animal <|-- Reptil

Animal --> Habitat : "vive en"

' MÓDULO: Interacción con Visitantes
class Visitante {
    - nombre: String
    - intereses: List<String>
    + Visitante(String nombre, List<String> intereses)
}

class VirtualGuide {
    + proveerTour(Visitante visitante): void
}

VirtualGuide --> Visitante : "guía"

' MÓDULO: Administración de Recursos
class Recurso {
    - nombre: String
    - cantidad: int
    - proveedor: String
}

class Inventario {
    - recursos: ArrayList<>Recurso>
    + aniadir_recurso(Recurso recurso): void
    + mostrar_inventario(): void
    + actualizar_recurso(String nombre, int nuevaCantidad): void
}

Inventario --> Recurso : "contiene"

' MÓDULO: Mantenimiento y Seguridad
class MaintenanceTask {
    - descripcion: String
    - fechaProgramada: LocalDate
    - estado: String
    + actualizarEstado(String estado): void
}

class MaintenanceManager {
    - tareas: List<MaintenanceTask>
    + programarTarea(MaintenanceTask tarea): void
    + seguimientoTareas(): void
}

class SecuritySystem {
    - eventos: List<String>
    + monitorAccess(): void
    + recordEvents(): void
}

MaintenanceManager --> MaintenanceTask : "gestiona"

@enduml
